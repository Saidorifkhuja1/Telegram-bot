from typing import Dict

import requests
import aiogram
from aiogram import types
from settings import SiteSettings
from site_API.core import SiteApiInterface
from database.common.models import db, History

bot = aiogram.Bot(token=SiteSettings.telegram_api)


async def start(message: types.Message) -> None:
    await message.reply('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤.')


async def help(message: types.Message) -> None:
    await message.reply('–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n'
                        '/low - –ø–æ–∏—Å–∫ —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –±–∏–ª–µ—Ç–æ–≤\n'
                        '/high - –ø–æ–∏—Å–∫ —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –±–∏–ª–µ—Ç–æ–≤\n'
                        '/custom - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞\n'
                        '/history - –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤\n'
                        '/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º')


async def low(message: types.Message) -> None:
    await message.reply('–ü–æ–∏—Å–∫ —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –±–∏–ª–µ—Ç–æ–≤')


async def high(message: types.Message) -> None:
    await message.reply('–ü–æ–∏—Å–∫ —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –±–∏–ª–µ—Ç–æ–≤')


async def custom(message: types.Message) -> None:
    await message.reply('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞')


async def history(message: types.Message) -> None:
    chat_id = message.chat.id
    histories = db.session.query(History).filter_by(chat_id=chat_id).all()

    if not histories:
        await message.reply('–í—ã –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–≤')
        return

    history_text = ''
    for history in histories:
        history_text += f'{history.origin} -> {history.destination} ({history.departure_date})\n'
    await message.reply(history_text)


async def search_tickets(message: types.Message) -> None:
    text = message.text.split()

    if len(text) != 3:
        await message.reply('–î–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /search <–≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è> <–≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è>')
        return

    origin = text[1]
    destination = text[2]
    departure_date = 'anytime'

    api_interface = SiteApiInterface(api_key=SiteSettings.telegram_api)
    response = api_interface.get_tickets(currency='rub', origin=origin, destination=destination,
                                         departure_date=departure_date)

    if response.status_code != 200:
        await message.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ')
        return

    tickets = response.json()['data']
    if not tickets:
        await message.reply('–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        return

    ticket = tickets[0]
    text = f'üõ© –†–µ–π—Å {ticket["flight_number"]}\n' \
           f'üõ´ –í—ã–ª–µ—Ç: {ticket["depart_date"]} {ticket["depart_time"]}\n' \
           f'üõ¨ –ü—Ä–∏–ª–µ—Ç: {ticket["return_date"]} {ticket["return_time"]}\n' \
           f'üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {ticket["value"]} —Ä—É–±–ª–µ–π\n' \
           f'üåê –ü–µ—Ä–µ–≤–æ–∑—á–∏–∫: {ticket["gate"]}'
    await message.reply(text)

    chat_id = message.chat.id
    history = History(chat_id=chat_id, origin=origin, destination=destination, departure_date=departure_date)
    db.session.add(history)
    db.session.commit()


async def main():
    dp = aiogram.Dispatcher(bot)


